import { AccountAddress } from './types/accountAddress';
import { ReduceStakePendingChange, RemovalPendingChange, StakePendingChange, StakePendingChangeV1, AccountInfo, AccountInfoBaker, AccountInfoBakerV0, AccountInfoBakerV1, AccountInfoDelegator, StakePendingChangeV0, GenerateBakerKeysOutput } from './types';
export declare const isDelegatorAccount: (ai: AccountInfo) => ai is AccountInfoDelegator;
export declare const isBakerAccount: (ai: AccountInfo) => ai is AccountInfoBaker;
export declare const isBakerAccountV1: (ai: AccountInfo) => ai is AccountInfoBakerV1;
export declare const isBakerAccountV0: (ai: AccountInfo) => ai is AccountInfoBakerV0;
export declare const isStakePendingChangeV1: (spc: StakePendingChange) => spc is StakePendingChangeV1;
export declare const isStakePendingChangeV0: (spc: StakePendingChange) => spc is StakePendingChangeV0;
export declare const isReduceStakePendingChange: (spc: ReduceStakePendingChange | RemovalPendingChange) => spc is ReduceStakePendingChange;
export declare const isRemovalPendingChange: (spc: ReduceStakePendingChange | RemovalPendingChange) => spc is RemovalPendingChange;
/**
 * Generates random baker keys for the specified account, that can be used with the configureBaker transaction
 * @param account the address of the account that the keys should be added to.
 * @returns an object containing the public baker keys, their associated proofs and their associated private keys.
 */
export declare function generateBakerKeys(account: AccountAddress): GenerateBakerKeysOutput;
