import { AccountTransactionType, Base58String, Base64String, ContractAddress, HexString, SmartContractTypeValues, UpdateContractPayload } from '../types';
import { Buffer } from 'buffer/';
export declare namespace CIS2 {
    /**
     * Union between `ContractAddress` and an account address represented by a `Base58String`.
     */
    type Address = ContractAddress | Base58String;
    /**
     * A contract address along with the name of the hook to be triggered when receiving a CIS-2 transfer.
     */
    type ContractReceiver = {
        /** Contract address to receive tokens */
        address: ContractAddress;
        /** Name of the entrypoint to be called on receiver contract. This is only the name of the function, NOT including the contract name */
        hookName: string;
    };
    /**
     * Union between an account address represented by a `Base58String` and a `ContractReceiver`.
     */
    type Receiver = Base58String | ContractReceiver;
    /**
     * Data needed to perform a "transfer" invocation according to the CIS-2 standard.
     */
    type Transfer = {
        /** The ID of the token to transfer */
        tokenId: HexString;
        /** The amount of tokens to transfer */
        tokenAmount: bigint;
        /** The address to transfer from */
        from: Address;
        /** The receiver of the transfer */
        to: Receiver;
        /** Optional additional data to include in the transaction */
        data?: HexString;
    };
    /**
     * Data needed to perform an "updateOperator" invocation according to the CIS-2 standard.
     */
    type UpdateOperator = {
        /** The type of the update */
        type: 'add' | 'remove';
        /** The address be used for the operator update */
        address: Address;
    };
    /**
     * Metadata necessary for CIS-2 transactions
     */
    type TransactionMetadata = {
        /** Amount (in microCCD) to include in the transaction. Defaults to 0n */
        amount?: bigint;
        /** The sender address of the transaction */
        senderAddress: HexString;
        /** Expiry date of the transaction. Defaults to 5 minutes in the future */
        expiry?: Date;
        /** Max energy to be used for the transaction */
        energy: bigint;
    };
    /**
     * Metadata necessary for creating a {@link UpdateTransaction}
     */
    type CreateTransactionMetadata = Pick<TransactionMetadata, 'amount' | 'energy'>;
    /**
     * Data needed for CIS-2 "balanceOf" query.
     */
    type BalanceOfQuery = {
        /** The ID of the token to query */
        tokenId: HexString;
        /** The address to query balance for */
        address: Address;
    };
    /**
     * Structure for holding metadata URL response from "tokenMetadata" query.
     */
    type MetadataUrl = {
        /** The URL of the metadata */
        url: string;
        /** An optional checksum for the URL */
        hash?: HexString;
    };
    /**
     * Data needed for CIS-2 "operatorOf" query.
     */
    type OperatorOfQuery = {
        /** The owner address for the query */
        owner: Address;
        /** The address to check whether it is an operator of `owner` */
        address: Address;
    };
    /**
     * An update transaction without header. This is useful for sending through a wallet, which supplies the header information.
     */
    type UpdateTransaction = {
        /** The type of the transaction, which will always be of type {@link AccountTransactionType.Update} */
        type: AccountTransactionType.Update;
        /** The payload of the transaction, which will always be of type {@link UpdateContractPayload} */
        payload: UpdateContractPayload;
        parameter: {
            /** Hex encoded parameter for the update */
            hex: HexString;
            /** JSON representation of the parameter to be used with the corresponding contract schema */
            json: SmartContractTypeValues;
        };
        schema: {
            /** Base64 encoded schema for the parameter type */
            value: Base64String;
            /** Type of the schema. This is always of type "parameter" */
            type: 'parameter';
        };
    };
    /**
     * Structure of a JSON-formatted address parameter.
     */
    type AddressParamJson = {
        Account: [Base58String];
    } | {
        Contract: [{
            index: number;
            subindex: number;
        }];
    };
    /**
     * Structure of JSON formatted receiver parameter
     */
    type ReceiverParamJson = {
        Account: [Base58String];
    } | {
        Contract: [{
            index: number;
            subindex: number;
        }, string];
    };
    /**
     * Structure of JSON formatted parameter used for CIS-2 "transfer" transactions
     */
    type TransferParamJson = {
        token_id: HexString;
        amount: string;
        from: AddressParamJson;
        to: ReceiverParamJson;
        data: HexString;
    };
    /**
     * Structure of JSON formatted parameter used for CIS-2 "updateOperator" transactions
     */
    type UpdateOperatorParamJson = {
        update: {
            Add: Record<string, never>;
        } | {
            Remove: Record<string, never>;
        };
        operator: AddressParamJson;
    };
}
/**
 * Checks whether an `Address` is a `ContractAddress`
 */
export declare const isContractAddress: (address: CIS2.Address) => address is ContractAddress;
/**
 * Serializes a list of {@link CIS2.Transfer} data objects according to the CIS-2 standard.
 *
 * @param {CIS2.Transfer[]} transfers - A list of {@link CIS2.Transfer} objects
 *
 * @example
 * const transfers = [{
    tokenId: '';
    tokenAmount: 100n;
    from: '3nsRkrtQVMRtD2Wvm88gEDi6UtqdUVvRN3oGZ1RqNJ3eto8owi',
    to: '3nsRkrtQVMRtD2Wvm88gEDi6UtqdUVvRN3oGZ1RqNJ3eto8owi',
    data: '48656c6c6f20776f726c6421';
}];
 * const bytes = serializeCIS2Transfers(transfers);
 */
export declare const serializeCIS2Transfers: (input: CIS2.Transfer[]) => Buffer;
/**
 * Serializes a list of {@link CIS2.UpdateOperator} data objects according to the CIS-2 standard.
 *
 * @param {CIS2.UpdateOperator[]} updates - A list of {@link CIS2.UpdateOperator} objects
 *
 * @example
 * const updates = [{
*       type: 'add',
*       address: '3nsRkrtQVMRtD2Wvm88gEDi6UtqdUVvRN3oGZ1RqNJ3eto8owi'
    }];
 * const bytes = serializeCIS2UpdateOperators(updates);
 */
export declare const serializeCIS2UpdateOperators: (input: CIS2.UpdateOperator[]) => Buffer;
/**
 * Serializes a list of {@link CIS2.BalanceOfQuery} data objects according to the CIS-2 standard.
 *
 * @param {CIS2.BalanceOfQuery[]} queries - A list of {@link CIS2.BalanceOfQuery} objects
 *
 * @example
 * const queries = [{tokenId: '', address: '3nsRkrtQVMRtD2Wvm88gEDi6UtqdUVvRN3oGZ1RqNJ3eto8owi'}];
 * const bytes = serializeCIS2BalanceOfQueries(queries);
 */
export declare const serializeCIS2BalanceOfQueries: (input: CIS2.BalanceOfQuery[]) => Buffer;
/**
 * Deserializes response of CIS-2 balanceOf query according to CIS-2 standard.
 *
 * @param {HexString} value - The hex string value to deserialize
 *
 * @returns {bigint[]} A list of token balances.
 */
export declare const deserializeCIS2BalanceOfResponse: (value: string) => bigint[];
/**
 * Serializes a list of {@link HexString} token ID's according to the CIS-2 standard.
 *
 * @param {HexString[]} tokenIds - A list of {@link HexString} values
 *
 * @example
 * const tokenIds = ['', '01', 'e2'];
 * const bytes = serializeCIS2TokenIds(tokenIds);
 */
export declare const serializeCIS2TokenIds: (input: string[]) => Buffer;
/**
 * Deserializes response of CIS-2 tokenMetadata query according to CIS-2 standard.
 *
 * @param {HexString} value - The hex string value to deserialize
 *
 * @returns {CIS2MetadataUrl[]} A list of metadata URL objects.
 */
export declare const deserializeCIS2TokenMetadataResponse: (value: string) => CIS2.MetadataUrl[];
/**
 * Serializes a list of {@link CIS2.OperatorOfQuery} queries according to the CIS-2 standard.
 *
 * @param {CIS2.OperatorOfQuery[]} queries - A list of {@link CIS2.OperatorOfQuery} objects
 *
 * @example
 * const queries = [{owner: "3nsRkrtQVMRtD2Wvm88gEDi6UtqdUVvRN3oGZ1RqNJ3eto8owi", address: {index: 123n, subindex: 0n}}];
 * const bytes = serializeCIS2OperatorOfQueries(tokenIds);
 */
export declare const serializeCIS2OperatorOfQueries: (input: CIS2.OperatorOfQuery[]) => Buffer;
/**
 * Deserializes response of CIS-2 operatorOf query according to CIS-2 standard.
 *
 * @param {HexString} value - The hex string value to deserialize
 *
 * @returns {boolean[]} A list of boolean values.
 */
export declare const deserializeCIS2OperatorOfResponse: (value: string) => boolean[];
/**
 * Format {@link CIS2.UpdateOperator} as JSON compatible with serialization wtih corresponding schema.
 */
export declare function formatCIS2UpdateOperator(input: CIS2.UpdateOperator): CIS2.UpdateOperatorParamJson;
/**
 * Format {@link CIS2.Transfer} as JSON compatible with serialization wtih corresponding schema.
 */
export declare function formatCIS2Transfer(input: CIS2.Transfer): CIS2.TransferParamJson;
