import { Buffer } from 'buffer/';
import { ConfigureBakerPayload, VerifyKey, ConfigureDelegationPayload, HexString } from './types';
import { DataBlob } from './types/DataBlob';
export declare function serializeMap<K extends string | number | symbol, T>(map: Record<K, T>, encodeSize: (size: number) => Buffer, encodeKey: (k: string) => Buffer, encodeValue: (t: T) => Buffer): Buffer;
export declare function serializeList<T>(list: T[], putSize: (size: number) => Buffer, putMember: (t: T) => Buffer): Buffer;
/**
 * Encodes a boolean to a Buffer using big endian.
 * @param value a boolean value
 * @returns boolean serialization of the input
 */
export declare function encodeBool(value: boolean): Buffer;
/**
 * Encodes a 64 bit unsigned integer to a Buffer using big endian.
 * @param value a 64 bit integer
 * @param useLittleEndian a boolean value, if not given, the value is serialized in big endian.
 * @returns big endian serialization of the input
 */
export declare function encodeWord64(value: bigint, useLittleEndian?: boolean): Buffer;
/**
 * Encodes a 32 bit signed integer to a Buffer using big endian.
 * @param value a 32 bit integer
 * @param useLittleEndian a boolean value, if not given, the value is serialized in big endian.
 * @returns big endian serialization of the input
 */
export declare function encodeInt32(value: number, useLittleEndian?: boolean): Buffer;
/**
 * Encodes a 32 bit unsigned integer to a Buffer.
 * @param value a 32 bit integer
 * @param useLittleEndian a boolean value, if not given, the value is serialized in big endian.
 * @returns big endian serialization of the input
 */
export declare function encodeWord32(value: number, useLittleEndian?: boolean): Buffer;
/**
 * Encodes a 16 bit signed integer to a Buffer.
 * @param value a 16 bit integer
 * @param useLittleEndian a boolean value, if not given, the value is serialized in big endian.
 * @returns big endian serialization of the input
 */
export declare function encodeInt16(value: number, useLittleEndian?: boolean): Buffer;
/**
 * Encodes a 16 bit unsigned integer to a Buffer using big endian.
 * @param value a 16 bit integer
 * @param useLittleEndian a boolean value, if not given, the value is serialized in big endian.
 * @returns big endian serialization of the input
 */
export declare function encodeWord16(value: number, useLittleEndian?: boolean): Buffer;
/**
 * Encodes a 8 bit signed integer to a Buffer using big endian.
 * @param value a 8 bit integer
 * @returns big endian serialization of the input
 */
export declare function encodeInt8(value: number): Buffer;
/**
 * Encodes a 8 bit unsigned integer to a Buffer using big endian.
 * @param value a 8 bit integer
 * @returns big endian serialization of the input
 */
export declare function encodeWord8(value: number): Buffer;
export declare function encodeWord8FromString(value: string): Buffer;
export declare function encodeWord16FromString(value: string, useLittleEndian?: boolean): Buffer;
/**
 * Encodes a Datablob.
 * @param blob Datablob containing data bytes.
 * @returns Buffer containing the length of the data and the data bytes.
 */
export declare function encodeDataBlob(blob: DataBlob): Buffer;
/**
 * Packing a buffer along with its length in 32 bits
 * @param buffer
 * @param useLittleEndian a boolean value, if not given, the value is serialized in big endian.
 * @returns Buffer containing the 32 bit length of buffer and buffer.
 */
export declare function packBufferWithWord32Length(buffer: Buffer, useLittleEndian?: boolean): Buffer;
/**
 * Packing a buffer along the with offset of 16 bit length
 * @param buffer containing the buffer
 * @returns Buffer containing the length of the buffer of 16 bit and buffer.
 */
export declare function packBufferWithWord16Length(buffer: Buffer, useLittleEndian?: boolean): Buffer;
/**
 * Packing a buffer along the with offset of 8 bit length
 * @param buffer containing the buffer
 * @returns Buffer containing the length of the buffer of 8 bit and buffer.
 */
export declare function packBufferWithWord8Length(buffer: Buffer): Buffer;
/**
 * Convert a hex string to a Buffer
 * @param str hex-encoded string
 * @returns Buffer
 */
export declare function encodeHexString(s: string): Buffer;
/**
 * Serializes a public key. The serialization includes the
 * scheme used for the key/
 * @param key the key to serialize
 * @returns the serialization of the key
 */
export declare function serializeVerifyKey(key: VerifyKey): Buffer;
/**
 * Serializes a year and month string.
 * @param yearMonth year and month formatted as "YYYYMM"
 * @returns the serialization of the year and month string
 */
export declare function serializeYearMonth(yearMonth: string): Buffer;
export declare type NotOptional<T> = {
    [P in keyof T]-?: T[P];
};
/**
 * Makes a type with keys from Object and values being functions that take values with types of respective original values, returning a Buffer or undefined.
 */
declare type SerializationSpec<T> = NotOptional<{
    [P in keyof T]: (v: T[P]) => Buffer | undefined;
}>;
export declare function isDefined<T>(v?: T): v is T;
/**
 * Takes a callback function taking 1 argument, returning a new function taking same argument, applying callback only if supplied argument is defined.
 */
export declare const orUndefined: <A, R>(fun: (v: A) => R) => (v: A | undefined) => R | undefined;
export declare const configureDelegationSerializationSpec: SerializationSpec<ConfigureDelegationPayload>;
export declare const getSerializedConfigureDelegationBitmap: (payload: ConfigureDelegationPayload) => Buffer;
export declare function serializeConfigureDelegationPayload(payload: ConfigureDelegationPayload): Buffer;
export declare function serializeConfigureBakerPayload(payload: ConfigureBakerPayload): Buffer;
/**
 * Helper function to create a function that deserializes a `HexString` value into a list of dynamic type values
 * determined by the deserialization logic defined in the callback function.
 *
 * @param {Function} deserializer - A callback function invoked with a `Buffer` containing the remaining slice of the full value given by the `input`
 * The callback function is expected to return the deserialized value  of type `R` along with the number of bytes processed in the format of {value: R, bytesRead: number}
 *
 * @returns {Function} A function taking a single `HexString` input, returning a list of dynamic type values deserialized according to the `deserializer` function.
 */
export declare const makeDeserializeListResponse: <R>(deserializer: (buffer: Buffer) => {
    value: R;
    bytesRead: number;
}) => (value: HexString) => R[];
export {};
